{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_rate",
						"type": "uint256"
					},
					{
						"internalType": "address payable",
						"name": "_wallet",
						"type": "address"
					},
					{
						"internalType": "contract ERC20Burnable",
						"name": "_token",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "TokenChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "purchaser",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "beneficiary",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TokensPurchased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "burnFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "buyBackWallet",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "beneficiary",
						"type": "address"
					}
				],
				"name": "buyTokens",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "charityWallet",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "subtractedValue",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "marketingWallet",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxBuyAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minBuyAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "setBuyBackWallet",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "setCharityWallet",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "setMarketingWallet",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "setTeamWallet",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "teamWallet",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"internalType": "contract ERC20Burnable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "wallet",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "weiRaised",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"allowance(address,address)": {
					"details": "See {IERC20-allowance}."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See {IERC20-balanceOf}."
				},
				"burn(uint256)": {
					"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
				},
				"burnFrom(address,uint256)": {
					"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
				},
				"buyTokens(address)": {
					"details": "low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.",
					"params": {
						"beneficiary": "Recipient of the token purchase"
					}
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
				},
				"decreaseAllowance(address,uint256)": {
					"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
				},
				"increaseAllowance(address,uint256)": {
					"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"rate()": {
					"returns": {
						"_0": "the number of token units a buyer gets per wei."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"token()": {
					"returns": {
						"_0": "the token being sold."
					}
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"wallet()": {
					"returns": {
						"_0": "the address where funds are collected."
					}
				},
				"weiRaised()": {
					"returns": {
						"_0": "the amount of wei raised."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"TokenChanged(address)": {
					"notice": "Event for token changes logging"
				},
				"TokensPurchased(address,address,uint256,uint256)": {
					"notice": "Event for token purchase logging"
				}
			},
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Christ.sol": "ChristMC"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Address.sol": {
			"keccak256": "0x4a7d161516c0cd5a840a1747826339ec885ad1ec6c884015af8ac77f6572f4ba",
			"license": "MIT",
			"urls": [
				"bzz-raw://ca5afe992f738efc2cf82767a0451b22d0247b7f2ac34e3dee02baa7118703f9",
				"dweb:/ipfs/QmayXvkYfNsHVtrYMjTVBox5g9r9U4W4Tx9W2q7cLxw5Ay"
			]
		},
		"contracts/Christ.sol": {
			"keccak256": "0x9a08601b7ffd014222e76c46137850f0723c48d52f46a360b0d646a86003661d",
			"license": "MIT",
			"urls": [
				"bzz-raw://bf03ca9ea97f813cf96fcc9f4a15253738ed4b46754cf26737c77960e9109104",
				"dweb:/ipfs/QmUVCBUMwAKzurDn7asAkgfLh78Km9aUJNWtbvkuGBweym"
			]
		},
		"contracts/Context.sol": {
			"keccak256": "0xe6b0fd58ddc810aa58acc8e1ca5f29469775c74adb950df6afaa9e573a9162cf",
			"license": "MIT",
			"urls": [
				"bzz-raw://ad8a44a17672844f734a8c2517f8cbd1fb581d1326ad7a04f7589d662e5874aa",
				"dweb:/ipfs/QmWG7CcrstgsPnKtna5ESirh2wExGWNRDkF8zvz5My4gVo"
			]
		},
		"contracts/Crowdsale.sol": {
			"keccak256": "0x54933631cfe7ba050d4a0d791d20b692f36ec8d8509400cae2fa79974cc6927d",
			"license": "MIT",
			"urls": [
				"bzz-raw://a51e240f3f20fba76a5325afe3af3d26990ec61a92a2c40fcf9824aafd376016",
				"dweb:/ipfs/QmUYreuCCbWqMsMuvvQQystcTH9FKsPcRMHBZ9zX5FbVZ8"
			]
		},
		"contracts/ERC20.sol": {
			"keccak256": "0xd5a968fc346a8da74e5e45f6e8885a197de2739b015fde6a9c2b63f9e5ad9521",
			"license": "MIT",
			"urls": [
				"bzz-raw://a84d95c767569c843009474860f36e3c4dd26f2b17f605920963d5960a17e9d9",
				"dweb:/ipfs/QmW3DZY4PQrRkEsiScbwng7zb1jqQDZatUedQsBYT79dv6"
			]
		},
		"contracts/ERC20Burnable.sol": {
			"keccak256": "0x1224774b2ef007cd4af977aef7a94d4b5276ba71169f0aaed5c0ce38a6eda1a5",
			"license": "MIT",
			"urls": [
				"bzz-raw://a4f185ca6e7e6d66c401a4e3b14e71084147b3be076acabbf8ceeee74bca0685",
				"dweb:/ipfs/QmT3AX12Q3WmGUDZQDesy9mMkpe4BU5iB7XKFyacvUj1UV"
			]
		},
		"contracts/IERC20.sol": {
			"keccak256": "0x4148ffa71d6f44cd5ac04ae7914a1c1ba9fe13129a279eab66cadc0489f4d728",
			"license": "MIT",
			"urls": [
				"bzz-raw://795d23086de655d6097b846604819364aadf284f993cbb0c96092be1b45be88c",
				"dweb:/ipfs/QmdXoTdgJeB6wXcNXq5QwEua5VEMvqQSDtLwAZY9e5r9dz"
			]
		},
		"contracts/IERC20Metadata.sol": {
			"keccak256": "0x3c65a32afb82ce4a8ed68d5cc11a6aca4c2a3194451fa81dc3b1d24ae973c819",
			"license": "MIT",
			"urls": [
				"bzz-raw://9f7b76d3033d7a89aadb4d05259151a9e9e90b17b0187145817e5e942699b424",
				"dweb:/ipfs/Qmdg4W7i1aNHcaXa1t7exM4NWN4P13mnW3DqNfW5xtLXKT"
			]
		},
		"contracts/Ownable.sol": {
			"keccak256": "0xa2cca059ecce8aac43fc05846c689f13f7459d35a473dd9c265a905735bd876c",
			"license": "MIT",
			"urls": [
				"bzz-raw://49998423b28be903c2c28326057a32af94cb215ca40d7a72e9a798a77635e173",
				"dweb:/ipfs/QmZZR4aoqZz1tJ3RiSuHcnYLwK5qE2tbvEEd3tt5XGTLJz"
			]
		},
		"contracts/ReentrancyGuard.sol": {
			"keccak256": "0xd7947ef4a04abfbd9b4b3acd43135d7cb16bc775fc27d1da2c1e1986ccc80ce7",
			"license": "MIT",
			"urls": [
				"bzz-raw://678032256f85ddd87937b15b2acf7ba676ad0da7bf07df037bdce5b89e91ee0c",
				"dweb:/ipfs/Qmc9wSe6B9cZPLF1AT1sUAribuBGFotYwKfUgwvj4R72ef"
			]
		},
		"contracts/SafeERC20.sol": {
			"keccak256": "0x2b5a59a8337e33f92530de4b4386fab153f62e905f568b8bf7837ce3107e8137",
			"license": "MIT",
			"urls": [
				"bzz-raw://7110da94543fb0e72420edbf514645fda176bc2b79a7cc84d113c83d92a90117",
				"dweb:/ipfs/QmSg2FwxRDmHxQ7jJ8nBYvjtgmGEmWGydRHYKYTtwMC1Vi"
			]
		},
		"contracts/SafeMath.sol": {
			"keccak256": "0x478cc76b6f924b6acb936ee9a41655757f29c3e1966215b7f91af8ea450bc7ff",
			"license": "MIT",
			"urls": [
				"bzz-raw://ad7a0c6c6f0ada75644bb847ad9fd18d7f2196b8cbff4482fa359ec2612efa44",
				"dweb:/ipfs/Qme9ZKD7y42xfQb6gi3kaeTkuDdUy966RjYgNELy4extc5"
			]
		}
	},
	"version": 1
}